#!@SH_PROG@
# -*- shell-script -*-
test_fns_copies()
{
    typeset result='bogus'

#     _Dbg_copies 'a' 'b'
#     assertFalse '_Dbg_copies "a" "b" should fail' "$?"

    _Dbg_copies 'a' -1
    assertFalse '_Dbg_copies "a" -1 should fail' "$?"

    _Dbg_copies 'a' 3
    assertTrue '_Dbg_copies "a" 3 should succeed' "$?"
    assertEquals 'aaa' $result

    _Dbg_copies ' ab' 4
    assertTrue '_Dbg_copies " ab" 4 should succeed' "$?"
    assertEquals ' ab ab ab ab' "$result"
}

test_fns_defined()
{
    typeset p=5
    _Dbg_defined p
    assertTrue 'p should be defined' "$?"
    unset p
    _Dbg_defined p
    assertFalse 'p should now not defined' "$?"
}

test_fns_esc_dq()
{
    assertEquals 'abc' $(_Dbg_esc_dq abc)
    got=$(_Dbg_esc_dq '\"abc\"')
    assertEquals $got  $'\'\\"abc\\"\'' # '
    assertEquals "'\\\"a\bc\\\"'" $(_Dbg_esc_dq '\"a\bc\"')
}

test_fns_get_functions()
{
    typeset -a ret_fns
    _Dbg_get_functions 0 ^test_fns_get_functions
    assertEquals 1 ${#ret_fns[@]}
}

test_fns_is_function()
{
    unset function_test
    _Dbg_is_function function_test
    assertFalse 'test_function should not be defined' "$?"
    typeset -i function_test=1
    _Dbg_is_function function_test
    assertFalse 'test_function should still not be defined' "$?"
    function_test() { :; }
    _Dbg_is_function function_test
    assertTrue 'test_function should now be defined' "$?"
    function another_function_test { :; }
    _Dbg_is_function another_function_test "$?"
}

test_fns_msg()
{
    typeset -i _Dbg_logging=0
    typeset -i _Dbg_logging_redirect=0
    typeset _Dbg_tty=''
    typeset msg=$(_Dbg_msg hi)
    assertEquals 'hi' "$msg"
    msg=$(_Dbg_msg_nocr hi)
    assertEquals 'hi' "$msg"
    msg=$(_Dbg_printf '%03d' 5)
    assertEquals '005' "$msg"
    msg=$(_Dbg_printf_nocr '%-3s' 'fo')
    assertEquals 'fo ' "$msg"
}

test_fns_onoff()
{
    assertEquals 'on.' $(_Dbg_onoff 1)
    assertEquals 'off.' $(_Dbg_onoff 0)
}

no__test_parse_linespec()
{
    # Necessary set up for function call.
    typeset _seteglob=''
    typeset -r int_pat="[0-9]*([0-9])"
    typeset  -i _Dbg_set_debugging=0

    typeset -a words=( $(_Dbg_parse_linespec 'test_defined') )
    assertEquals '4' ${words[0]}
    assertEquals '1' ${words[1]}
#     typeset -a words=( $(_Dbg_parse_linespec '_Dbg_parse_linespec') )
#     assertEquals '0' ${#words[@]}
    unset foo
    typeset -a words=( $(_Dbg_parse_linespec 'foo') )
    assertEquals '0' ${#words[@]}
}

# Test _Dbg_split
test_fns_split()
{
    typeset -a words
    words=($(_Dbg_split ':' 'foo:bar'))
    assertEquals 'foo' ${words[0]}
    assertEquals 'bar' ${words[1]}
    words=($(_Dbg_split ':' 'foo'))
    assertEquals 'foo' ${words[0]}
}

abs_top_srcdir=@abs_top_srcdir@
abs_top_srcdir=${abs_top_srcdir%%/}/
. ${abs_top_srcdir}test/unit/helper.sh
. $abs_top_srcdir/init/pre.sh
. $abs_top_srcdir/lib/msg.sh
. $abs_top_srcdir/lib/fns.sh
. $abs_top_srcdir/lib/frame.sh
. $abs_top_srcdir/lib/journal.sh
set -- # reset $# so shunit2 doesn't get confused.
[[ @CMDLINE_INVOKED@ ]] && . ${shunit_file}
