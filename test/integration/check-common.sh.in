#@SH_PROG@
# -*- shell-script -*-
PS4='(${.sh.file}:${LINENO}): ${.sh.fun} - [${.sh.subshell}]
'

if [ -z "$SH" ] ; then
  SH=@SH_PROG@
fi

export top_builddir=@abs_top_builddir@
export top_srcdir=@abs_top_srcdir@
export srcdir=@abs_srcdir@

check_output() {
    typeset testfile="$1"
    typeset rightfile="$2"
    # Bourne sh
    # set -o noglob

    @DIFF@ @DIFF_OPTS@ $testfile $rightfile && rm -f $testfile
    return $?
}

# Run the debugger on test program $1 with (optional) debugger options $2
# using commandfile $3. We assume $TOP_BUILDDIR, $TOP_SRCDIR and
# $TEST_NAME have been set previously
run_debugger() {
    typeset debugged_script=$1
    typeset dbg_opts=${2:-"-L ${top_srcdir} --no-init -B -q --no-highlight"}
    typeset cmdfile=${3:-"${top_srcdir}/test/data/${TEST_NAME}.cmd"}
    $SH -- ${top_builddir}/@PACKAGE@ $dbg_opts -x "$cmdfile" "$debugged_script" $ARGS
}

TEST_FILE="${top_builddir}/test/integration/${TEST_NAME}.check"
RIGHT_FILE="${top_srcdir}/test/data/${TEST_NAME}.right"
TEST_FILTERED_FILE="/tmp/${TEST_NAME}-filtered.check"
RIGHT_FILTERED_FILE="/tmp/${TEST_NAME}-filtered.right"
ARGS=''

run_test_check() {
    short_script_name=${1:-$TEST_NAME}
    debugged_script="${top_srcdir}/test/example/${short_script_name}.sh"
    if [[ -z "$srcdir" ]] ; then
	print -r -- "You need to set srcdir before running this."
	exit 10
    fi
    (cd $srcdir && run_debugger "$debugged_script" 2>&1 >$TEST_FILE </dev/null)
    check_output "$TEST_FILE" "$RIGHT_FILE"
    # Return code tells testing mechanism whether passed or not.
    exit $?
}
